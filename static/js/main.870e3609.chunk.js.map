{"version":3,"sources":["components/Context/LanguageContext.js","components/Field/Field.js","components/Context/ColorContext.js","components/Button/Button.js","components/UserCreate/UserCreate.js","components/App/App.js","index.js"],"names":["context","React","createContext","Field","text","this","react_default","a","createElement","Component","contextType","LanguageContext","Button","ColorContext","Consumer","color","className","concat","type","value","UserCreate","components_Field_Field","components_Button_Button","App","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onLanguageChange","name","setState","changeColor","prevState","state","_this2","onClick","Provider","components_UserCreate_UserCreate","ReactDOM","render","components_App_App","document","getElementById"],"mappings":"uKAKeA,EAFCC,IAAMC,cAAc,WCD9BC,mLAUF,IAAMC,EAAwB,YAAjBC,KAAKL,QAAwB,OAAS,OACnD,OACEM,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,aAAQJ,GACRE,EAAAC,EAAAC,cAAA,sBAdYC,aAAdN,EAOGO,YAAcC,EAaRR,QCpBAF,MAAMC,cAAc,OCyBpBU,mLAjBX,OACEN,EAAAC,EAAAC,cAACK,EAAaC,SAAd,KACG,SAAAC,GAAK,OACJT,EAAAC,EAAAC,cAAA,UACEQ,UAAS,aAAAC,OAAyB,QAAVF,EAAkB,MAAQ,WAClDG,KAAK,UAELZ,EAAAC,EAAAC,cAACG,EAAgBG,SAAjB,KACG,SAAAK,GAAK,MAAe,YAAVA,EAAsB,SAAW,yBAVrClB,IAAMQ,WCKZW,EATI,WACjB,OACEd,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,WACbV,EAAAC,EAAAC,cAACa,EAAD,MACAf,EAAAC,EAAAC,cAACc,EAAD,QCiDSC,cA/Cb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAArB,KAAAkB,IACjBE,EAAAC,OAAAE,EAAA,EAAAF,CAAArB,KAAAqB,OAAAG,EAAA,EAAAH,CAAAH,GAAAO,KAAAzB,KAAMmB,KAQRO,iBAAmB,SAAAC,GACjBP,EAAKQ,SAAS,CACZD,KAAMA,IAERP,EAAKS,eAbYT,EAgBnBS,YAAc,WACZT,EAAKQ,SAAS,SAAAE,GAAS,MAAK,CAC1BpB,MAA2B,QAApBoB,EAAUpB,MAAkB,UAAY,UAfjDU,EAAKW,MAAQ,CACXJ,KAAM,GACNjB,MAAO,IALQU,wEAsBV,IAAAY,EAAAhC,KACP,OACEC,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,gBACbV,EAAAC,EAAAC,cAAA,gCAEEF,EAAAC,EAAAC,cAAA,KACE8B,QAAS,kBAAMD,EAAKN,iBAAiB,YACrCf,UAAU,YAEZV,EAAAC,EAAAC,cAAA,KACE8B,QAAS,kBAAMD,EAAKN,iBAAiB,UACrCf,UAAU,aAIdV,EAAAC,EAAAC,cAACK,EAAa0B,SAAd,CAAuBpB,MAAOd,KAAK+B,MAAMrB,OACvCT,EAAAC,EAAAC,cAACG,EAAgB4B,SAAjB,CAA0BpB,MAAOd,KAAK+B,MAAMJ,MAC1C1B,EAAAC,EAAAC,cAACgC,EAAD,gBAxCM/B,aCLlBgC,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.870e3609.chunk.js","sourcesContent":["import React from \"react\";\n\n// Set the default value for context to english\nconst context = React.createContext(\"english\");\n\nexport default context;\n","import React, { Component } from \"react\";\nimport LanguageContext from \"../Context/LanguageContext\";\nclass Field extends Component {\n  // Create the context type then use this.context to get access to the context object\n  // static creates a property on the Button class\n  // alternative syntax could be\n  // Field.contextType = LanguageContext\n  // the value needs to be contextType to make the contextvalue work.\n  // the value needs to be references as this.context\n  static contextType = LanguageContext;\n  render() {\n    // used to change the value of the label based on the context value\n    const text = this.context === \"english\" ? \"Name\" : \"Naam\";\n    return (\n      <div>\n        <label>{text}</label>\n        <input />\n      </div>\n    );\n  }\n}\n\nexport default Field;\n","import React from \"react\";\n\nexport default React.createContext(\"red\");\n","import React from \"react\";\nimport LanguageContext from \"../Context/LanguageContext\";\nimport ColorContext from \"../Context/ColorContext\";\n\n/* \n      MAKE USE OF CONSUMER WHENEVER YOU WANT TO GET INFORMATION FROM MULTIPLE DIFFERENT CONTEXT OBJECTS INSIDE OF A SINGLE COMPONENT.\n      Whenever we use the Context API's consumer we  need to provide a fuction that will be passed the value inside of the context object. The function will automatically be invoked and in this case will set the value that we want based on our logic. The child of the consumer needs to be a function. */\n\nclass Button extends React.Component {\n  render() {\n    return (\n      <ColorContext.Consumer>\n        {color => (\n          <button\n            className={`ui button ${color === \"red\" ? \"red\" : \"primary\"}`}\n            type=\"button\"\n          >\n            <LanguageContext.Consumer>\n              {value => (value === \"english\" ? \"Submit\" : \"Voorleggen\")}\n            </LanguageContext.Consumer>\n          </button>\n        )}\n      </ColorContext.Consumer>\n    );\n  }\n}\n\nexport default Button;\n","import React from \"react\";\nimport Field from \"../Field/Field\";\nimport Button from \"../Button/Button\";\n\nconst UserCreate = () => {\n  return (\n    <div className=\"ui form\">\n      <Field />\n      <Button />\n    </div>\n  );\n};\n\nexport default UserCreate;\n","import React, { Component } from \"react\";\nimport UserCreate from \"../UserCreate/UserCreate\";\nimport LanguageContext from \"../Context/LanguageContext\";\nimport ColorContext from \"../Context/ColorContext\";\n\n// We define a context object to pass props to the Button and Field component.\n// Since the UserCreate component does not need access to the object inside of context\n// We are going to use the context API.\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      name: \"\",\n      color: \"\"\n    };\n  }\n\n  onLanguageChange = name => {\n    this.setState({\n      name: name\n    });\n    this.changeColor();\n  };\n  // To be used by the Color Consumer to change the value of the color property sent to the Button component.\n  changeColor = () => {\n    this.setState(prevState => ({\n      color: prevState.color === \"red\" ? \"primary\" : \"red\"\n    }));\n  };\n\n  render() {\n    return (\n      <div className=\"ui container\">\n        <div>\n          Select a language:\n          <i\n            onClick={() => this.onLanguageChange(\"english\")}\n            className=\"flag us\"\n          />\n          <i\n            onClick={() => this.onLanguageChange(\"dutch\")}\n            className=\"flag nl\"\n          />\n        </div>\n        {/* The provider is used to change the value that is inside of the context object. */}\n        <ColorContext.Provider value={this.state.color}>\n          <LanguageContext.Provider value={this.state.name}>\n            <UserCreate />\n          </LanguageContext.Provider>\n        </ColorContext.Provider>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}